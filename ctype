#!/usr/bin/python3

import main, sys



DEFAULT_HEADERS = [
    "stdio.h",
    "ctype.h",
    "sys/stat.h",
    "string.h",
    "math.h",
    "assert.h",
    "complex.h",
    "errno.h",
    "fenv.h",
    "float.h",
    "inttypes.h",
    "iso646.h",
    "limits.h",
    "locale.h",
    "setjmp.h",
    "signal.h",
    "stdalign.h",
    "stdarg.h",
    "stdatomic.h",
    # "stdbit.h",
    "stdbool.h",
    # "stdckdint.h",
    "stddef.h",
    "stdint.h",
    "stdlib.h",
    "stdnoreturn.h",
    # "tgmath.h",
    "threads.h",
    "time.h",
    "uchar.h",
    "wchar.h",
    "wctype.h"
]


import _global
argv = sys.argv[:]
pretty = "-p" in argv

if pretty:
    idx = argv.index("-p")
    argv = argv[:idx] + argv[idx+1:]

if len(argv) < 2:
    print("Error: Expected a type name")
    exit(1)

typename = argv[1]
includes = argv[2:] if len(argv) > 2 else []
includes += DEFAULT_HEADERS


_global.init()
_global.INCLUDES = includes
DECLS = {d["name"]:d for d in sum([main.PULL_DECLS(i) for i in includes], [])}



if typename not in DECLS:
    print("Error: Failed to find type: " + typename)
    exit(1)

d = DECLS[typename]

if pretty:
    print(d["pretty_str"])
else:
    print(d["encoded_str"], end="")
